title = "Scatterplot of Offensive and Defensive YPG") +
scale_x_continuous(breaks = seq(0, 500, by = 25)) +
scale_y_continuous(breaks = seq(0, 500, by = 25)) +
geom_hline(aes(yintercept = mean(def_ypg)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(off_ypg)), linetype = "dashed", alpha = 0.5)
margins = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_pts_scored),
allowed = sapply(team, get_pts_allowed),
games = sapply(team, get_games_played)) |>
transmute(team, margin = scored - allowed, avg_margin = round((scored - allowed) / games, 3),
team2 = paste0(team, " (", margin, ")"))
margins |>
mutate(pos_lab = ifelse(margin >= 0, team, ""),
neg_lab = ifelse(margin < 0, team, "")) |>
ggplot(aes(reorder(team2, margin), margin)) +
geom_col(aes(fill = team2), show.legend = F) +
geom_text(aes(label = pos_lab), size = 3, alpha = 0.25, hjust = -0.25) +
geom_text(aes(label = neg_lab), size = 3, alpha = 0.25, hjust = 1.25) +
scale_fill_manual(values = team_hex) +
coord_flip(ylim = c(min(margins$margin) * 1.05, max(margins$margin) * 1.05)) +
labs(x = NULL, y = "Margin", title = "Team Margins") +
scale_y_continuous(breaks = seq(-1000, 1000, by = 10))
pam_df = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_pts_scored),
allowed = sapply(team, get_pts_allowed),
margin = scored - allowed,
total = scored + allowed,
pam = round(margin / total, 4) * 10) |>
select(team, pam) |>
mutate(team2 = paste0(team, " (", pam, ")"))
pam_df |>
ggplot(aes(reorder(team2, pam), pam)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_hex) +
coord_flip() +
labs(x = NULL, y = "PAM", title = "PAM: Point-Adjusted Margin",
subtitle = "PAM = (Points Scored - Points Allowed) / Points Scored") +
annotate("text", x = 1.5, y = max(pam_df$pam) * 0.8, label = "Data: NFL.com via {nflfastR}", size = 3, fontface = "italic") +
scale_y_continuous(breaks = seq(-100, 100, by = 1))
teams_qtrs = data.frame()
for (team in all_teams) {
for (qtr in 1:4) {
teams_qtrs = rbind(teams_qtrs, data.frame(team = team, qtr = qtr))
}
}
teams_qtrs |>
left_join(season_pbp |>
filter(sp == 1) |>
mutate(pts_scored = case_when(touchdown == 1 ~ 6,
field_goal_result == "made" ~ 3,
extra_point_result == "good" ~ 1,
two_point_conv_result == "success" ~ 2,
safety == 1 ~ 2,
T ~ 1000000),
scoring_team = case_when(touchdown == 1 ~ td_team,
field_goal_result == "made" ~ posteam,
extra_point_result == "good" ~ posteam,
two_point_conv_result == "success" ~ posteam,
safety == 1 ~ defteam,
T ~ "XXXXXXXXXXXXXXX"),
new_qtr = ifelse(qtr == 5, 4, qtr)) |>
group_by(team = scoring_team, qtr = new_qtr) |>
summarise(pts = sum(pts_scored),
.groups = "drop") |>
group_by(team) |>
mutate(pct = round(pts / sum(pts), 3)) |>
ungroup(), by = c("team", "qtr")) |>
mutate(pts = replace_na(pts, 0),
pct = replace_na(pct, 0)) |>
ggplot(aes(qtr, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Quarter", y = "Percentage of Points Scored",
title = "When are teams scoring their points?",
subtitle = "Overtime treated as 4Q")
ppg_df = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_pts_scored),
allowed = sapply(team, get_pts_allowed),
games = sapply(team, get_games_played)) |>
transmute(team, ppg = round(scored / games, 3), papg = round(allowed / games, 3))
cpr_df = end_games |>
select(home_team, home_score, away_team, away_score) |>
inner_join(ppg_df, by = c("home_team" = "team")) |>
rename(home_ppg = ppg, home_papg = papg) |>
inner_join(ppg_df, by = c("away_team" = "team")) |>
rename(away_ppg = ppg, away_papg = papg) |>
mutate(home_exp = round((home_ppg + away_papg) / 2, 3),
away_exp = round((away_ppg + home_papg) / 2, 3),
home_off_cpr = home_score - home_exp,
home_def_cpr = away_exp - away_score,
away_off_cpr = away_score - away_exp,
away_def_cpr = home_exp - home_score) |>
select(home_team, home_score, away_team, away_score, home_off_cpr, home_def_cpr, away_off_cpr, away_def_cpr)
get_off_cpr = function(team) {
home = cpr_df |> filter(home_team == team) |> pull(home_off_cpr)
away = cpr_df |> filter(away_team == team) |> pull(away_off_cpr)
return(round(mean(c(home, away)), 3))
}
get_def_cpr = function(team) {
home = cpr_df |> filter(home_team == team) |> pull(home_def_cpr)
away = cpr_df |> filter(away_team == team) |> pull(away_def_cpr)
return(round(mean(c(home, away)), 3))
}
team_cpr = data.frame(team = all_teams) |>
mutate(off_cpr = sapply(team, get_off_cpr),
def_cpr = sapply(team, get_def_cpr),
total_cpr = off_cpr + def_cpr)
team_cpr |>
ggplot(aes(off_cpr, def_cpr)) +
geom_point(aes(col = team), shape = "square", size = 5, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3.5, box.padding = 0.5, segment.alpha = 0.5, max.overlaps = 32) +
geom_hline(aes(yintercept = 0), linetype = "dashed", alpha = 0.25) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.25) +
labs(x = "Offensive CPR", y = "Defensive CPR",
title = "Scatterplot of Offensive and Defensive CPRs",
subtitle = "Composite Performance Rating (CPR) is an Evaluation of Performance Over/Under Expected") +
scale_x_continuous(breaks = seq(-10, 10, by = 1)) +
scale_y_continuous(breaks = seq(-10, 10, by = 1))
cpr_ranks = team_cpr |>
arrange(desc(total_cpr))
current_week = 5
season_pbp |>
filter(!is.na(air_yards) & week == current_week - 1) |>
mutate(is_complete = ifelse(is.na(yards_after_catch), 0, 1)) |>
select(passer, air_yards, is_complete) |>
group_by(passer) |>
summarise(n = n(),
total_air = sum(air_yards),
avg_air = mean(air_yards),
comp_rate = mean(is_complete)) |>
filter(n >= 10) |>
transmute(passer, cer = round(avg_air / (1 - comp_rate), 3),
cer = round(log(cer), 3),
passer = paste0(passer, " (", cer, ")")) |>
ggplot(aes(reorder(passer, cer), cer)) +
geom_col(aes(fill = cer), show.legend = F) +
coord_flip() +
scale_fill_gradient(low = "indianred3", high = "springgreen4") +
labs(x = NULL, y = "QB CER",
title = "Past Week CER Rankings",
subtitle = "CER (Chad Efficiency Rating) = ln(Avg. Air Yards / (1 - Completion Rate))") +
scale_y_continuous(breaks = seq(0, 10, by = 0.5))
qb_air = season_pbp |>
filter(!is.na(air_yards) & !is.na(yards_after_catch)) |>
mutate(passer = paste0(substr(passer, 1, 2), " ", substr(passer, 3, nchar(passer)))) |>
select(passer, air_yards, yards_after_catch) |>
group_by(passer) |>
summarise(n = n(),
total_air = sum(air_yards),
total_yac = sum(yards_after_catch)) |>
slice_max(n, n = 32, with_ties = F) |>
mutate(total_yds = total_air + total_yac,
pct_air = round(total_air / total_yds, 3),
pct_yac = round(total_yac / total_yds, 3)) |>
select(passer, pct_air, pct_yac)
season_pbp |>
filter(!is.na(air_yards) & !is.na(yards_after_catch)) |>
mutate(passer = paste0(substr(passer, 1, 2), " ", substr(passer, 3, nchar(passer)))) |>
select(passer, air_yards, yards_after_catch) |>
group_by(passer) |>
summarise(n = n(),
total_air = sum(air_yards),
total_yac = sum(yards_after_catch)) |>
slice_max(n, n = 32, with_ties = F) |>
mutate(total_yds = total_air + total_yac,
pct_air = round(total_air / total_yds, 3),
pct_yac = round(total_yac / total_yds, 3)) |>
select(passer, pct_air, pct_yac) |>
pivot_longer(!passer, names_to = "air_yac", values_to = "value") |>
inner_join(qb_air, by = "passer") |>
mutate(air_yac = ifelse(air_yac == "pct_yac", "Yards After Catch", "Air Yards"),
air_yac = factor(air_yac, levels = c("Yards After Catch", "Air Yards")),
passer = paste0(passer, " (", pct_yac * 100, "% YAC)")) |>
ggplot(aes(reorder(passer, pct_air), value)) +
geom_col(aes(fill = air_yac), width = 0.6) +
scale_fill_manual(values = c("#D49898", "#85A67E")) +
coord_flip() +
labs(x = NULL, y = "Percent of Total Yards", fill = NULL,
title = "Which QBs are YAC merchants?") +
theme(legend.position = "right") +
scale_y_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent)
modeling_metrics = pam_df |>
select(team, pam) |>
inner_join(margins |>
select(team, avg_margin), by = "team") |>
inner_join(ppg_df, by = "team")
modeling_df = end_games |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(modeling_metrics, by = c("home_team" = "team")) |>
rename(home_pam = pam,
home_avg_margin = avg_margin,
home_ppg = ppg,
home_papg = papg) |>
inner_join(modeling_metrics, by = c("away_team" = "team")) |>
rename(away_pam = pam,
away_avg_margin = avg_margin,
away_ppg = ppg,
away_papg = papg)
log_mod = glm(home_win ~ home_pam + home_avg_margin + home_ppg + home_papg +
away_pam + away_avg_margin + away_ppg + away_papg,
data = modeling_df, family = "binomial")
mod_res = modeling_df |>
mutate(pred_prob = round(predict(log_mod, newdata = modeling_df, type = "response"), 3),
pred_home_win = ifelse(pred_prob >= 0.5, 1, 0)) |>
count(home_win == pred_home_win) |>
pull(n)
acc_pct = paste0(round(mod_res[2] / sum(mod_res), 4) * 100, "%")
predict_game_winner = function(home_team, away_team) {
matchup_stats = data.frame(home_team = home_team, away_team = away_team) |>
inner_join(pam_df, by = c("home_team" = "team")) |>
select(home_team, away_team, home_pam = pam) |>
inner_join(margins, by = c("home_team" = "team")) |>
select(home_team, away_team, home_pam, home_avg_margin = avg_margin) |>
inner_join(ppg_df, by = c("home_team" = "team")) |>
rename(home_ppg = ppg, home_papg = papg) |>
inner_join(pam_df, by = c("away_team" = "team")) |>
select(home_team:home_papg, away_pam = pam) |>
inner_join(margins, by = c("away_team" = "team")) |>
select(home_team:away_pam, away_avg_margin = avg_margin) |>
inner_join(ppg_df, by = c("away_team" = "team")) |>
rename(away_ppg = ppg, away_papg = papg)
home_win_prob = predict(log_mod, matchup_stats, type = "response")
if (home_win_prob >= 0.5) {
return(home_team)
} else {
return(away_team)
}
}
predict_winner_prob = function(home_team, away_team) {
matchup_stats = data.frame(home_team = home_team, away_team = away_team) |>
inner_join(pam_df, by = c("home_team" = "team")) |>
select(home_team, away_team, home_pam = pam) |>
inner_join(margins, by = c("home_team" = "team")) |>
select(home_team, away_team, home_pam, home_avg_margin = avg_margin) |>
inner_join(ppg_df, by = c("home_team" = "team")) |>
rename(home_ppg = ppg, home_papg = papg) |>
inner_join(pam_df, by = c("away_team" = "team")) |>
select(home_team:home_papg, away_pam = pam) |>
inner_join(margins, by = c("away_team" = "team")) |>
select(home_team:away_pam, away_avg_margin = avg_margin) |>
inner_join(ppg_df, by = c("away_team" = "team")) |>
rename(away_ppg = ppg, away_papg = papg)
home_win_prob = predict(log_mod, matchup_stats, type = "response")
if (home_win_prob >= 0.5) {
return(round(home_win_prob, 3))
} else {
return(round(1 - home_win_prob, 3))
}
}
this_week = nflfastR::fast_scraper_schedules(season = 2023) |>
filter(week == 5) |>
select(home_team, away_team) |>
rowwise() |>
mutate(pred_winner = predict_game_winner(home_team, away_team),
pred_loser = ifelse(pred_winner == home_team, away_team, home_team),
winner_prob = predict_winner_prob(home_team, away_team)) |>
ungroup() |>
arrange(desc(winner_prob))
this_week_preds = data.frame(desc = NULL)
for (i in 1:nrow(this_week)) {
str = paste0(this_week$away_team[i], " @ ", this_week$home_team[i], ": ",
this_week$pred_winner[i], " def. ", this_week$pred_loser[i], " (", this_week$winner_prob[i], ")")
this_week_preds = rbind(this_week_preds, data.frame(desc = str))
}
# team pts scored each week slugs
end_games
get_pts_scored("CHI")
# team pts scored each week slugs
end_games
get_week_pts_scored = function(team, wk) {
x = end_games |> filter((home_team == team | away_team == team) & week == wk)
if (x$home_team == team) score = x$home_score else score = x$away_score
return(score)
}
get_week_pts_scored("CHI", 5)
weekly_scored = data.frame()
for (i in 1:length(all_teams)) {
for (j in 1:max(end_games$week)) {
x = data.frame(team = all_teams[i], week = j)
weekly_scored = rbind(weekly_scored, x)
}
}
weekly_scored
weekly_scored = na.omit(weekly_scored)
weekly_scored
weekly_scored = data.frame()
for (i in 1:length(all_teams)) {
for (j in 1:max(end_games$week)) {
x = data.frame(team = all_teams[i], week = j)
weekly_scored = rbind(weekly_scored, x)
}
}
weekly_scored
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup()
get_week_pts_scored = function(team, wk) {
x = end_games |> filter((home_team == team | away_team == team) & week == wk)
if (nrow(x) == 0) return(NA)
if (x$home_team == team) score = x$home_score else score = x$away_score
return(score)
}
weekly_scored = data.frame()
for (i in 1:length(all_teams)) {
for (j in 1:max(end_games$week)) {
x = data.frame(team = all_teams[i], week = j)
weekly_scored = rbind(weekly_scored, x)
}
}
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup()
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit()
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored))
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
facet_wrap(vars(team))
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.25), labels = scales::percent)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.3), labels = scales::percent)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent)
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x") +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x", nrow = 4) +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x", nrow = 8) +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x", nrow = 6) +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
weekly_scored |>
rowwise() |>
mutate(week_scored = get_week_pts_scored(team, week)) |>
ungroup() |>
na.omit() |>
mutate(total_scored = sapply(team, get_pts_scored),
pct = week_scored / total_scored) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team), scales = "free_x", nrow = 5) +
scale_y_continuous(breaks = seq(0, 1, by = 0.5), labels = scales::percent) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Offensive Scoring Trends")
