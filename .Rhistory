desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4))
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team)
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
summarise(home_prev = lag(home_score),
away_prev = lag(away_score))
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
summarise(home_prev = lag(home_score),
away_prev = lag(away_score)) |>
ungroup()
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
mutate(home_prev = lag(home_score),
away_prev = lag(away_score)) |>
ungroup()
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
mutate(home_prev = lag(home_score),
away_prev = lag(away_score)) |>
ungroup() |>
mutate(home_prev = replace_na(home_prev, 0),
away_prev = replace_na(away_prev, 0))
load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
mutate(home_prev = lag(home_score),
away_prev = lag(away_score)) |>
ungroup() |>
mutate(home_prev = replace_na(home_prev, 0),
away_prev = replace_na(away_prev, 0),
home_qtr_score = home_score - home_prev,
away_qtr_score = away_score - away_prev)
qtr_scores = load_pbp() |>
filter(desc %in% c("END QUARTER 1", "END QUARTER 2", "END QUARTER 3", "END GAME")) |>
mutate(qtr = case_when(desc == "END QUARTER 1" ~ 1,
desc == "END QUARTER 2" ~ 2,
desc == "END QUARTER 3" ~ 3,
desc == "END GAME" ~ 4)) |>
select(game_id, qtr, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
group_by(game_id) |>
mutate(home_prev = lag(home_score),
away_prev = lag(away_score)) |>
ungroup() |>
mutate(home_prev = replace_na(home_prev, 0),
away_prev = replace_na(away_prev, 0),
home_qtr_score = home_score - home_prev,
away_qtr_score = away_score - away_prev)
qtr_scores
library(tidyverse)
library(lubridate)
library(magrittr)
past.solutions = read.table("all_wordle_solutions.txt") |>
set_colnames(c("month", "day", "year", "x", "day_num", "word")) |>
mutate(word = str_to_lower(word)) |>
mutate(month = case_when(month == "Jan" ~ 1, month == "Feb" ~ 2, month == "Mar" ~ 3,
month == "Apr" ~ 4, month == "May" ~ 5, month == "Jun" ~ 6,
month == "Jul" ~ 7, month == "Aug" ~ 8, month == "Sep" ~ 9,
month == "Oct" ~ 10, month == "Nov" ~ 11, month == "Dec" ~ 12),
date = mdy(paste(month, day, year, sep = "-"))) |>
filter(date <= Sys.Date() - 1) |>
pull(word)
df = data.frame(scan("wordle_answers.txt", character(), quote = "")) |>
set_colnames("word") |>
mutate(one = substr(word, 1, 1),
two = substr(word, 2, 2),
three = substr(word, 3, 3),
four = substr(word, 4, 4),
five = substr(word, 5, 5)) |>
filter(!word %in% past.solutions)
alphabet = c("a", "b", "c", "d", "e",
"f", "g", "h", "i", "j",
"k", "l", "m", "n", "o",
"p", "q", "r", "s", "t",
"u", "v", "w", "x", "y", "z")
no_raw = c("tare")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
yes_raw = c("s")
yes = rep(NA, nchar(yes_raw))
for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(one != "s")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("tarefhy")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
yes_raw = c("s")
yes = rep(NA, nchar(yes_raw))
for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(one != "s")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("tarefhy")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
yes_raw = c("si")
yes = rep(NA, nchar(yes_raw))
for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(one != "s")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("tarefhy")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
yes_raw = c("si")
yes = rep(NA, nchar(yes_raw))
for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(one != "s")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(nflfastR)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
write_csv(load_pbp(season = 2023), "data/season_pbp.csv") # doing this prevents data update message
season_pbp = read_csv("data/season_pbp.csv", show_col_types = F)
end_games = season_pbp |>
filter(desc == "END GAME") |>
select(game_id, date = game_date, week, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
mutate(win_team = case_when(home_score > away_score ~ home_team,
home_score < away_score ~ away_team,
home_score == away_score ~ "Tie"),
win_score = case_when(home_score > away_score ~ home_score,
home_score < away_score ~ away_score,
home_score == away_score ~ home_score),
lose_team = case_when(home_score > away_score ~ away_team,
home_score < away_score ~ home_team,
home_score == away_score ~ "Tie"),
lose_score = case_when(home_score > away_score ~ away_score,
home_score < away_score ~ home_score,
home_score == away_score ~ away_score),
game_margin = win_score - lose_score,
total_points = win_score + lose_score)
end_games
get_pts_scored = function(team) {
home_score = end_games |> filter(home_team == team) |> pull(home_score)
away_score = end_games |> filter(away_team == team) |> pull(away_score)
return(sum(c(home_score, away_score)))
}
get_pts_allowed = function(team) {
home_score = end_games |> filter(home_team == team) |> pull(away_score)
away_score = end_games |> filter(away_team == team) |> pull(home_score)
return(sum(c(home_score, away_score)))
}
all_teams = sort(unique(c(unique(end_games$home_team), unique(end_games$away_team))))
team_hex = teams_colors_logos |>
select(team = team_abbr, team_color) |>
filter(team %in% all_teams) |>
pull(team_color)
pam_df = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_pts_scored),
allowed = sapply(team, get_pts_allowed),
margin = scored - allowed,
total = scored + allowed,
pam = round(margin / total, 4) * 10) |>
select(team, pam) |>
mutate(team = paste0(team, " (", pam, ")"))
pam_df |>
ggplot(aes(reorder(team, pam), pam)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_hex) +
coord_flip() +
labs(x = NULL, y = "PAM", title = "PAM: Point-Adjusted Margin",
subtitle = "PAM = (Points Scored - Points Allowed) / Points Scored") +
annotate("text", x = 1.5, y = max(pam_df$pam) * 0.8, label = "Data: NFL.com via {nflfastR}", size = 3, fontface = "italic") +
scale_y_continuous(breaks = seq(-100, 100, by = 1))
get_games_played = function(team) {
x = c(end_games$home_team, end_games$away_team)
return(length(x[x == team]))
}
ppg_scatter = data.frame(team = all_teams) |>
mutate(pts_scored = sapply(team, get_pts_scored),
pts_allowed = sapply(team, get_pts_allowed),
games_played = sapply(team, get_games_played),
off_ppg = round(pts_scored / games_played, 3),
def_ppg = round(pts_allowed / games_played, 3))
ppg_scatter |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = team), size = 5, shape = "square", show.legend = F) +
ggrepel::geom_text_repel(aes(label = team), size = 3.5, box.padding = 0.5, segment.alpha = 0.5, max.overlaps = 32) +
scale_color_manual(values = team_hex) +
# geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG") +
geom_polygon(data = data.frame(x = c(0, max(ppg_scatter$off_ppg), max(ppg_scatter$off_ppg), 0),
y = c(0, 0, max(ppg_scatter$def_ppg), 0)),
aes(x, y), fill = "springgreen2", alpha = 0.1) +
geom_polygon(data = data.frame(x = c(0, max(ppg_scatter$off_ppg), max(ppg_scatter$off_ppg), 0),
y = c(0, 0, max(ppg_scatter$def_ppg), max(ppg_scatter$def_ppg))),
aes(x, y), fill = "indianred3", alpha = 0.1) +
scale_x_continuous(breaks = seq(0, 50, by = 2.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2.5))
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(nflfastR)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
write_csv(load_pbp(season = 2023), "data/season_pbp.csv") # doing this prevents data update message
season_pbp = read_csv("data/season_pbp.csv", show_col_types = F)
end_games = season_pbp |>
filter(desc == "END GAME") |>
select(game_id, date = game_date, week, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
mutate(win_team = case_when(home_score > away_score ~ home_team,
home_score < away_score ~ away_team,
home_score == away_score ~ "Tie"),
win_score = case_when(home_score > away_score ~ home_score,
home_score < away_score ~ away_score,
home_score == away_score ~ home_score),
lose_team = case_when(home_score > away_score ~ away_team,
home_score < away_score ~ home_team,
home_score == away_score ~ "Tie"),
lose_score = case_when(home_score > away_score ~ away_score,
home_score < away_score ~ home_score,
home_score == away_score ~ away_score),
game_margin = win_score - lose_score,
total_points = win_score + lose_score)
end_games
get_pts_scored = function(team) {
home_score = end_games |> filter(home_team == team) |> pull(home_score)
away_score = end_games |> filter(away_team == team) |> pull(away_score)
return(sum(c(home_score, away_score)))
}
get_pts_allowed = function(team) {
home_score = end_games |> filter(home_team == team) |> pull(away_score)
away_score = end_games |> filter(away_team == team) |> pull(home_score)
return(sum(c(home_score, away_score)))
}
all_teams = sort(unique(c(unique(end_games$home_team), unique(end_games$away_team))))
team_hex = teams_colors_logos |>
select(team = team_abbr, team_color) |>
filter(team %in% all_teams) |>
pull(team_color)
pam_df = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_pts_scored),
allowed = sapply(team, get_pts_allowed),
margin = scored - allowed,
total = scored + allowed,
pam = round(margin / total, 4) * 10) |>
select(team, pam) |>
mutate(team = paste0(team, " (", pam, ")"))
pam_df |>
ggplot(aes(reorder(team, pam), pam)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_hex) +
coord_flip() +
labs(x = NULL, y = "PAM", title = "PAM: Point-Adjusted Margin",
subtitle = "PAM = (Points Scored - Points Allowed) / Points Scored") +
annotate("text", x = 1.5, y = max(pam_df$pam) * 0.8, label = "Data: NFL.com via {nflfastR}", size = 3, fontface = "italic") +
scale_y_continuous(breaks = seq(-100, 100, by = 1))
get_games_played = function(team) {
x = c(end_games$home_team, end_games$away_team)
return(length(x[x == team]))
}
ppg_scatter = data.frame(team = all_teams) |>
mutate(pts_scored = sapply(team, get_pts_scored),
pts_allowed = sapply(team, get_pts_allowed),
games_played = sapply(team, get_games_played),
off_ppg = round(pts_scored / games_played, 3),
def_ppg = round(pts_allowed / games_played, 3))
ppg_scatter |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = team), size = 5, shape = "square", show.legend = F) +
ggrepel::geom_text_repel(aes(label = team), size = 3.5, box.padding = 0.5, segment.alpha = 0.5, max.overlaps = 32) +
scale_color_manual(values = team_hex) +
# geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG") +
geom_polygon(data = data.frame(x = c(0, max(ppg_scatter$off_ppg), max(ppg_scatter$off_ppg), 0),
y = c(0, 0, max(ppg_scatter$def_ppg), 0)),
aes(x, y), fill = "springgreen2", alpha = 0.1) +
geom_polygon(data = data.frame(x = c(0, max(ppg_scatter$off_ppg), max(ppg_scatter$off_ppg), 0),
y = c(0, 0, max(ppg_scatter$def_ppg), max(ppg_scatter$def_ppg))),
aes(x, y), fill = "indianred3", alpha = 0.1) +
scale_x_continuous(breaks = seq(0, 50, by = 2.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2.5))
pbp = load_pbp()
pbp
setwd("~/r_projects/nfl_dash")
season_pbp
season_pbp |>
sample_n(10)
season_pbp |>
count(sp)
season_pbp |>
filter(sp == 1)
season_pbp |>
filter(sp == 1) |>
count(play_type)
season_pbp |>
filter(sp == 1 & play_type == "punt")
season_pbp |>
filter(sp == 1)
season_pbp |>
filter(sp == 1) |>
count(play_type)
season_pbp |>
filter(sp == 1)
season_pbp |>
filter(sp == 1 & str_detect(desc, "TOUCHDOWN"))
season_pbp |>
filter(sp == 1 & str_detect(desc, "TOUCHDOWN") & play_type == "field_goal")
season_pbp |>
filter(sp == 1)
season_pbp |>
filter(sp == 1) |>
count(series_result)
season_pbp |>
filter(sp == 1)
season_pbp |>
filter(sp == 1) |>
select(contains("touchdown"))
season_pbp |>
filter(sp == 1) |>
select(contains("td"))
season_pbp |>
filter(sp == 1) |>
select(contains("fg"))
season_pbp |>
filter(sp == 1) |>
select(contains("field_goal"))
season_pbp |>
filter(sp == 1) |>
select(contains("safety"))
season_pbp |>
filter(sp == 1) |>
select(contains("xp"))
season_pbp |>
filter(sp == 1) |>
select(contains("extra"))
season_pbp |>
filter(sp == 1) |>
select(contains("td"))
season_pbp |>
filter(sp == 1) |>
select(contains("touchdown"))
season_pbp |>
filter(sp == 1) |>
# mutate(pts_scored = case_when(touchdown == 1 ~ 6,))
select(contains("field_goal"))
season_pbp |>
filter(sp == 1) |>
# mutate(pts_scored = case_when(touchdown == 1 ~ 6,
# field_goal_result == "made" ~ 3,))
select(contains("fg"))
season_pbp |>
filter(sp == 1) |>
# mutate(pts_scored = case_when(touchdown == 1 ~ 6,
# field_goal_result == "made" ~ 3,))
select(contains("extra"))
season_pbp |>
filter(sp == 1) |>
# mutate(pts_scored = case_when(touchdown == 1 ~ 6,
#                               field_goal_result == "made" ~ 3,
#                               extra_point_result == "good" ~ 1,
#                               ))
select(contains("two_point"))
season_pbp |>
filter(sp == 1) |>
# mutate(pts_scored = case_when(touchdown == 1 ~ 6,
#                               field_goal_result == "made" ~ 3,
#                               extra_point_result == "good" ~ 1,
#                               two_point_conv_result == "success" ~ 2,
#                               ))
select(contains("safety"))
season_pbp |>
filter(sp == 1) |>
mutate(pts_scored = case_when(touchdown == 1 ~ 6,
field_goal_result == "made" ~ 3,
extra_point_result == "good" ~ 1,
two_point_conv_result == "success" ~ 2,
safety == 1 ~ 2,
T ~ 100))
season_pbp |>
filter(sp == 1) |>
mutate(pts_scored = case_when(touchdown == 1 ~ 6,
field_goal_result == "made" ~ 3,
extra_point_result == "good" ~ 1,
two_point_conv_result == "success" ~ 2,
safety == 1 ~ 2,
T ~ 100)) |>
count(pts_scored)
season_pbp |>
filter(sp == 1) |>
mutate(pts_scored = case_when(touchdown == 1 ~ 6,
field_goal_result == "made" ~ 3,
extra_point_result == "good" ~ 1,
two_point_conv_result == "success" ~ 2,
safety == 1 ~ 2,
T ~ 100))
season_pbp |>
filter(sp == 1) |>
mutate(pts_scored = case_when(touchdown == 1 ~ 6,
field_goal_result == "made" ~ 3,
extra_point_result == "good" ~ 1,
two_point_conv_result == "success" ~ 2,
safety == 1 ~ 2,
T ~ 100)) |>
group_by(qtr) |>
summarise(pts = sum(pts_scored))
